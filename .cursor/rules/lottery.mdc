---
description: 
globs: 
alwaysApply: true
---
# 🎯 DAEBAK_AI 프로젝트 통합 코딩 룰

## 🔧 MCP 서버 필수 활용
- **@filesystem**: 파일 생성/수정/삭제 시 우선 사용, 실제 프로젝트 구조 파악
- **@codebase**: 기존 코드 패턴 확인 필수, 중복 방지
- **@git**: 변경사항 추적, 커밋 히스토리 기반 패턴 유지

## 🏗️ 프로젝트 구조 (고정, 변경 금지)
src/
├── shared/         # 공통 타입 (LotteryNumber, PatternAnalysis, ModelPrediction)
├── analysis/       # 분석 모듈 (BaseAnalyzer 상속)
├── core/          # 핵심 엔진 (RecommendationEngine)
├── utils/         # 유틸리티 (통합 시스템)
├── models/        # ML/DL 모델 (BaseModel 상속)
│   ├── ml/        # LightGBM, XGBoost, CatBoost, RandomForest
│   ├── dl/        # MLP, AE, LSTM, GNN, Transformer
│   ├── rl/        # DQN, PPO, Q-table
│   ├── bayesian/  # BayesianNN
│   └── meta/      # MetaLearner
├── evaluation/    # 평가 모듈 (Backtester)
├── pipeline/      # 파이프라인
├── training/      # 훈련 모듈
├── environment/   # 환경 설정
└── run/          # 실행 파일 (wrapper만)

## ⚙️ 설정 접근 규칙 (엄격 적용)
```python
# ✅ 허용된 방식
config["training"]["use_filtered_vector"]

# ❌ 금지된 방식
config.get("training", {}).get("use_filtered_vector", False)
safe_get(config, "training.use_filtered_vector")

# 키 누락 시 즉시 종료
try:
    value = config["required_key"]
except KeyError as e:
    logger.error(f"[ERROR] 설정 키 누락: {str(e)}")
    raise RuntimeError("설정 키 누락으로 프로세스 종료")
📁 파일 경로 규칙
python# 고정 경로 (변경 금지)
config_path = "config/config.yaml"
models_dir = "savedModels/{model_name}.pt"
results_dir = "data/result/analysis/"
vectors_dir = "data/cache/feature_vectors_full.npy"
reports_dir = "data/result/performance_reports/"

# ❌ 날짜 포함 금지, 임의 경로 생성 금지
🔨 코딩 표준
Import 순서
python# 1. 표준 라이브러리
import os, sys, json, time
from typing import Dict, Any, List, Optional

# 2. 서드파티
import numpy as np
import torch
from sklearn.ensemble import RandomForestClassifier

# 3. 프로젝트 내부
from ..shared.types import LotteryNumber, ModelPrediction
from ..utils.unified_logging import get_logger
from ..utils.cache_paths import get_cache_dir
클래스 구조
pythonclass AnalyzerExample(BaseAnalyzer):
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config, analyzer_type="example")
        self.logger = get_logger(__name__)
    
    def analyze(self, data: List[LotteryNumber]) -> Dict[str, Any]:
        try:
            # 메인 로직
            return result
        except SpecificError as e:
            self.logger.error(f"분석 오류: {e}")
            # 폴백 로직
        except Exception as e:
            self.logger.error(f"예상치 못한 오류: {e}")
            raise
🎯 시스템 아키텍처 규칙

모델 통합 규칙
python# 베이스 모델 상속 필수
class MyModel(BaseModel):
    def fit(self, X: np.ndarray, y: np.ndarray) -> Dict[str, Any]:
        # 구현 필수
    
    def predict(self, X: np.ndarray) -> np.ndarray:
        # 구현 필수
    
    def save(self, path: str) -> bool:
        # 구현 필수
    
    def load(self, path: str) -> bool:
        # 구현 필수
🚫 금지사항 (엄격 적용)

❌ run*.py 내 직접 로직 작성 (wrapper만 허용)
❌ torch.save() 직접 사용 (model_saver.py 사용)
❌ argparse, CLI 인터페이스 사용
❌ 파일명에 timestamp 포함
❌ Trainer 클래스 직접 상속 (UnifiedTrainer 사용)
❌ 차원 불일치 허용 (allow_mismatch=False 고정)

📊 성능 최적화 규칙
python# 메모리 관리
from ..utils.memory_manager import MemoryManager

# AMP 사용
from ..utils.cuda_optimizers import AMPTrainer

# 캐시 활용
from ..utils.cache_paths import get_cache_dir

# 프로파일링
from ..utils.performance_tracker import performance_monitor