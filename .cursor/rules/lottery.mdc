---
description: 
globs: 
alwaysApply: true
---
✅ MCP 서버 활용 규칙 (강제)
@filesystem : 파일 작업 시 무조건 사용

@codebase : 기존 패턴/구조 탐색 시 항상 사용

@git : 히스토리 기반 변경 검증 시 활용

✅ 프로젝트 디렉토리 구조 (변경 금지)
bash
복사
편집
src/
├── shared/         # 타입, 공용 데이터 클래스
├── analysis/       # BaseAnalyzer 상속 분석기
├── core/           # RecommendationEngine 핵심
├── utils/          # 메모리, 로깅, 캐시 경로 등
├── models/
│   ├── ml/         # LightGBM, XGBoost
│   ├── dl/         # MLP, AE, TCN
│   └── meta/       # MetaWeight 통합
├── evaluation/     # backtester, diversity_evaluator
├── pipeline/       # 분석/전처리/추천 파이프라인
├── training/       # 모델 학습 모듈
├── environment/    # config, optimization.yaml
└── run/            # 실행 Wrapper
✅ 설정 접근 규칙 (강제)
python
복사
편집
# ✅ 이렇게만
config["training"]["use_filtered_vector"]

# ❌ 금지
config.get(...)
safe_get(...)
키 누락 시 즉시 종료, try-except 필수

✅ 파일 경로 규칙 (고정 경로만 허용)
항목	경로
설정	config/config.yaml
모델 저장	savedModels/{model_name}.pt
결과 저장	data/result/analysis/
벡터 저장	data/cache/feature_vectors_full.npy
리포트 저장	data/result/performance_reports/
❌ 금지	날짜폴더, 동적경로

✅ Import 순서 규칙 (엄격)
python
복사
편집
# 1. 표준 라이브러리
import os, sys, json, time

# 2. 서드파티
import numpy as np
import torch
from sklearn.ensemble import RandomForestClassifier

# 3. 프로젝트 내부
from ..shared.types import LotteryNumber, ModelPrediction
from ..utils.unified_logging import get_logger
from ..utils.cache_paths import get_cache_dir
✅ 클래스 설계 규칙 (분석기/모델 공통)
Analyzer 예시
python
복사
편집
class ExampleAnalyzer(BaseAnalyzer):
    def __init__(self, config):
        super().__init__(config, analyzer_type="example")
        self.logger = get_logger(__name__)

    def analyze(self, data):
        try:
            # 분석 로직
            return result
        except Exception as e:
            self.logger.error(f"분석 오류: {e}")
            raise
모델 예시
python
복사
편집
class MyModel(BaseModel):
    def fit(self, X, y):
        # 구현 필수

    def predict(self, X):
        # 구현 필수

    def save(self, path):
        # 구현 필수

    def load(self, path):
        # 구현 필수
✅ 강제 금지사항 (절대 위반 금지)
❌ run/*.py 내 직접 로직

❌ torch.save() 직접 호출

❌ argparse / CLI 코드 작성

❌ 경로에 timestamp 포함

❌ Trainer 직접 상속

❌ 차원 불일치 허용
(→ allow_mismatch=False 고정)

✅ 성능 최적화 규칙
항목	내용
메모리	MemoryManager 무조건 사용
AMP	AMPTrainer로만
캐시	get_cache_dir() 사용 강제
프로파일링	performance_monitor 필수

커맨드 사용시 파우셀 기준으로 작성해줘

요청사항을 명확하게 숙지하고 요청사항대로 빠짐없이 작성해줘